{"version":3,"sources":["media/firechart.png","components/FireRatingChart.js","App.js","serviceWorker.js","index.js","media/airrow.png"],"names":["module","exports","FireRatingChart","state","loading","regionName","regionNumber","fireDangerToday","fireBanToday","fireDangerTomorrow","fireBanTodayTomorrow","xml2js","require","this","setState","fetch","proxyUrl","then","response","text","data","parseStringPromise","result","FireDangerMap","District","Name","RegionNumber","DangerLevelToday","FireBanToday","DangerLevelTomorrow","fireBanTomorrow","FireBanTomorrow","ratingsList","arrowDegree","warningBgColor","todaysWarning","rating","key","todaysRating","tomorrowsWarningColor","tomorrowsRating","cataWarningColor","mainWarningText","className","style","backgroundColor","color","animation","src","alt","height","transform","href","target","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d81abce3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/firechart.91714137.png\";","import React, {Component} from \"react\";\n\nclass FireRatingChart extends Component {\n    constructor() {\n      super()\n      this.state = {\n        loading: false,\n        regionName: \"\",\n        regionNumber: \"\",\n        fireDangerToday : \"\",\n        fireBanToday: \"\",\n        fireDangerTomorrow : \"\",\n        fireBanTodayTomorrow : \"\",\n\n      }\n    }\n\n/* The datafile was in XML, so had to be converted to JSON. I used NPM xml2js for this. Also the datafile had a cors issue, which was overcome using the proxyURL! So here the data is received as text, and then converted to json. */\n    componentDidMount() {\n      var xml2js = require('xml2js');\n      var proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n      var targetUrl = 'http://www.rfs.nsw.gov.au/feeds/fdrToban.xml';\n\n      this.setState({loading: true})\n      fetch(proxyUrl + targetUrl)\n        .then(response => response.text())\n        .then(data => xml2js.parseStringPromise(data))\n        .then(result => {\n            this.setState({\n              loading: false,\n              regionName: result.FireDangerMap.District[3].Name[0],\n              regionNumber: result.FireDangerMap.District[3].RegionNumber[0],\n              fireDangerToday: result.FireDangerMap.District[3].DangerLevelToday[0],\n              fireBanToday: result.FireDangerMap.District[3].FireBanToday[0],\n              fireDangerTomorrow: result.FireDangerMap.District[3].DangerLevelTomorrow[0],\n              fireBanTomorrow: result.FireDangerMap.District[3].FireBanTomorrow[0],\n            })\n          })\n    }\n\n    render(){\n\n      const ratingsList = {\n        \"LOW MODERATE\": [-75, \"#17a462\"],\n        \"HIGH\": [-45, \"#00adef\"],\n        \"VERY HIGH\": [-15, \"#ffd600\"],\n        \"SEVERE\": [15, \"#fd9e1d\"],\n        \"EXTREME\": [45, \"#e5281b\"],\n        \"CATASTROPHIC\": [75, \"#e5281b\"]\n      }\n\n      let arrowDegree = \"\";\n      let warningBgColor = \"\";\n      let todaysWarning = \"\";\n\n      function todaysRating(rating) {\n        for (let key in ratingsList) {\n          if (key === rating) {\n            todaysWarning = rating;\n            arrowDegree = ratingsList[key][0];\n            warningBgColor = ratingsList[key][1];\n          }\n        }\n      }\n      todaysRating(this.state.fireDangerToday);\n\n      let tomorrowsWarningColor = \"\";\n      function tomorrowsRating(rating) {\n        for (let key in ratingsList) {\n          if (key === rating) {\n            tomorrowsWarningColor = ratingsList[key][1];\n          }\n        }\n      }\n      tomorrowsRating(this.state.fireDangerTomorrow);\n\n\n      const cataWarningColor = todaysWarning === \"CATASTROPHIC\" ? \"white\" : null;\n      const mainWarningText = this.state.loading ? \"loading...\" : <span className=\"warningText\" style={{backgroundColor: warningBgColor, color: cataWarningColor }}> {todaysWarning} </span>;\n      const animation = this.state.loading ? <img src={require(\"../media/airrow.png\")} alt=\"Fire Rating Arrow\" height=\"120px\" className=\"chartArrow\" style={{transform:`rotate(0deg)`}}/> : <img src={require(\"../media/airrow.png\")} alt=\"Fire Rating Arrow\" height=\"120px\" className=\"chartArrow\" style={{transform:`rotate(${arrowDegree}deg)`, animation: `arrowMovement 2s`}}/>;\n\n      return(\n        <div>\n          <h1>Today's Fire Danger Rating For Campbelltown: {mainWarningText}</h1>\n          <div className=\"parent\">\n            <img src={require(\"../media/firechart.png\")} alt=\"fire ratings chart\" className=\"fireChart\" height=\"220px\"/>\n            {animation}\n\n            <p><span className=\"textBold\">Region Name:</span> {this.state.regionName}</p>\n            <p><span className=\"textBold\">Region Number:</span>  {this.state.regionNumber}</p>\n            <p><span className=\"textBold\">Total Fire Ban Today?:</span>  {this.state.fireBanToday}</p>\n            <span>_______________</span>\n\n            <p><span className=\"textBold\">Fire Danger Rating for Tomorrow:</span> <span className=\"warningText textBold\" style={{backgroundColor: tomorrowsWarningColor, color: cataWarningColor }}>{this.state.fireDangerTomorrow}</span></p>\n            <p><span className=\"textBold\">Total Fire Ban Tomorrow?:</span> {this.state.fireBanTomorrow}</p>\n            <br />\n\n            <h4>You can confirm the data on the official RFS site - <a href=\"https://www.rfs.nsw.gov.au/fire-information/fdr-and-tobans\" target=\"_blank\">here!</a></h4>\n          </div>\n        </div>\n      )\n      }\n    }\n\nexport default FireRatingChart\n","import React, {Component} from 'react';\nimport './App.css';\nimport FireChart from './components/FireRatingChart';\n\nclass App extends Component {\n\n\n  render(){\n    return(\n      <div>\n        < FireChart />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/airrow.ea7cc9d7.png\";"],"sourceRoot":""}